/**
 * DO NOT EDIT
 *
 * This file was automatically generated by
 *   https://github.com/Polymer/tools/tree/master/packages/gen-typescript-declarations
 *
 * To modify these typings, edit the source file(s):
 *   headers-list-view.js
 */


// tslint:disable:variable-name Describing an API that's defined elsewhere.
// tslint:disable:no-any describes the API as best we are able today

import {LitElement, html, css} from 'lit-element';

import {HeadersParserMixin} from '@advanced-rest-client/headers-parser-mixin/headers-parser-mixin.js';

declare namespace UiElements {

  /**
   * An element that displays a list of headers.
   *
   * On double click on the list the `query-headers` event is dispatched to
   * get header definition. When information is handled by the application
   * then it dispays a dialog with header documentation.
   * Use `advanced-rest-client/arc-definitions` element to handle queries.
   *
   * The `headers` property accepts a HTTP headers string or `Headers` object
   * as defined in Fetch spec.
   *
   * ### Example
   *
   * ```html
   * <headers-list-view headers="Content-Type: application/json"></headers-list-view>
   * ```
   *
   * ### Styling
   * `<headers-list-view>` provides the following custom properties and mixins for styling:
   *
   * Custom property | Description | Default
   * ----------------|-------------|----------
   * `--headers-list-view` | Mixin applied to the element | `{}`
   * `--arc-font-body1` | Mixin applied to the example section in the details dialog. | `{}`
   * `--arc-font-body2` | Mixin applied to the description section in the details dialog. | `{}`
   * `--arc-font-code1` | Mixin apllied to the list | `{}`
   * `--headers-list-item-min-height` | Min height of the list item. | `20px`
   * `--arc-link` | Mixin applied to a link | `{}`
   */
  class HeadersListView extends
    HeadersParserMixin(
    Object) {

    /**
     * A HTTP headers to display.
     */
    headers: string|null|undefined;

    /**
     * Parsed headers to the array of headers.
     */
    _headersList: Array<object|null>|null;

    /**
     * Type of the header.
     * Can be either `request` or `response`.
     * It is required for displaying the help for the headers. The element
     * fires the `query-headers` event on double click which requires this
     * information to be set.
     */
    type: string|null|undefined;

    /**
     * Header title in the details dialog.
     */
    _hdTitle: string|null|undefined;

    /**
     * Header description in the details dialog.
     */
    _hdBody: string|null|undefined;

    /**
     * Header example in the details dialog.
     */
    _hdExample: string|null|undefined;

    /**
     * A regexp used to match links in headers string.
     */
    _linkR: RegExp|null;
    _listTemplate(headers: any): any;
    render(): any;

    /**
     * The list view requires to add some markup dynamically therefore it cannot
     * use Polymer's replates and binding system.
     * Heaqders list is generated manually when headers string has changed.
     *
     * @param headers Headers to render
     */
    _headersChanged(headers: String|null): void;

    /**
     * Double click on header line handler.
     * Will call model for data to display.
     */
    _displayHeaderInfo(e: CustomEvent|null): void;

    /**
     * Dispatches `query-headers` custom event handled by `arc-definitions`
     * component.
     *
     * @param header Header name to query
     * @returns Event's detail object
     */
    _headersQueryEvent(header: String|null): object|null;

    /**
     * Dispatches analytics event.
     *
     * @param action Event action
     * @param label Event label
     */
    _analyticsEvent(action: String|null, label: String|null): void;

    /**
     * Finds URLs in input string and adds anchors tags.
     */
    _autoLink(input: any): any;
  }
}

declare global {

  interface HTMLElementTagNameMap {
    "headers-list-view": UiElements.HeadersListView;
  }
}
